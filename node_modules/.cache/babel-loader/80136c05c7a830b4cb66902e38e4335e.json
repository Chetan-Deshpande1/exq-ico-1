{"ast":null,"code":"import bep20Abi from './../Config/abis/bep20Abi.json';\nimport crowdsaleAbi from './../Config/abis/crowdsaleAbi.json';\nimport { getAddress } from './addressHelper';\nimport { getAccount, getUserBalance, getWeb3 } from './currentWalletHelper';\nimport contracts from './../Config/contracts';\nexport const getCrowdsaleContract = async () => {\n  try {\n    let web3 = await getWeb3();\n    console.log(\"here\", web3);\n    let crowdsale = await new web3.eth.Contract(crowdsaleAbi, await getAddress(contracts.crowdsale));\n    console.log(\"crowdsale\", crowdsale);\n    return crowdsale;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTokenContract = async tokenName => {\n  try {\n    let web3 = await getWeb3();\n    let token = await new web3.eth.Contract(bep20Abi, await getAddress(contracts[tokenName]));\n    console.log(\"token\", token);\n    return token;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getAllowance = async (tokenName, account) => {\n  try {\n    let web3 = await getWeb3();\n    let token = await getTokenContract(tokenName);\n    let crowdsaleAddress = await getAddress(contracts.crowdsale);\n    let allowance = await token.methods.allowance(account, crowdsaleAddress).call();\n    console.log(\"allowance\", await web3.utils.fromWei(allowance.toString(), \"ether\"));\n    return await web3.utils.fromWei(allowance.toString(), \"ether\");\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTokenBalance = async (tokenName, account) => {\n  try {\n    let web3 = await getWeb3();\n    let token = await getTokenContract(tokenName);\n    let balance;\n\n    if (tokenName == \"bnb\") {\n      balance = await getUserBalance();\n    } else balance = await token.methods.balanceOf(account).call();\n\n    console.log(\"balance\", await web3.utils.fromWei(balance.toString(), \"ether\"));\n    return await web3.utils.fromWei(balance.toString(), \"ether\");\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getEquivalentToken = async (tokenToPurchase, tokenName) => {\n  try {\n    let web3 = await getWeb3();\n    let contract = await getCrowdsaleContract();\n    tokenToPurchase = await web3.utils.toWei(tokenToPurchase.toString());\n    console.log(\"token to purchase\", tokenToPurchase);\n    let amount = await contract.methods.amountNeedsToBePaid(tokenToPurchase, contracts[tokenName].type).call();\n    console.log(\"amount1\", amount.toString());\n    console.log(\"amount\", await web3.utils.fromWei(amount, \"ether\"));\n    return (await web3.utils.fromWei(amount, \"ether\")).toString();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const checkIfApproved = async (inputAmount, tokenName, account) => {\n  try {\n    let allowance = await getAllowance(tokenName, account);\n    console.log(\"allowances\", inputAmount, allowance);\n\n    if (Number(allowance) < Number(inputAmount)) {\n      console.log(\"false\");\n      return false;\n    } else {\n      console.log(\"true\");\n      return true;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const isUserHaveId = async account => {\n  try {\n    let web3 = await getWeb3();\n    let contract = await getCrowdsaleContract();\n    let id = await contract.methods.usersId(account).call(); // console.log(\"id-------->\", id)\n\n    return id.toString();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const generateRefLink = async account => {\n  let link;\n  let id = await isUserHaveId(account);\n\n  if (Number(id) < 10000) {\n    return \"\";\n  }\n\n  link = process.env.REACT_APP_URL + \"?id=\" + id;\n  return link; // console.log(\"ref-link\", link,process.env.REACT_APP_URL)\n};\nexport const getCorrespondingEQX = async (amount, tokenName) => {\n  try {\n    let web3 = await getWeb3();\n    let contract = await getCrowdsaleContract();\n    amount = await web3.utils.toWei(amount.toString());\n    let receivingEQX = await contract.methods.getCorrespondingTokens(amount, contracts[tokenName].type).call();\n    console.log(\"receivingEQX-------->\", receivingEQX);\n    return (await web3.utils.fromWei(receivingEQX, \"ether\")).toString();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getCurrId = async () => {\n  try {\n    let web3 = await getWeb3();\n    let contract = await getCrowdsaleContract();\n    let id = await contract.methods.currId().call();\n    console.log(\"currid-------->\", id);\n    return id.toString();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getCurrPrice = async () => {\n  let contract = await getCrowdsaleContract();\n  let price = await contract.methods.price().call();\n  console.log(\"price-------->\", price / 1e8);\n  return (price / 1e8).toString();\n};","map":{"version":3,"sources":["/home/neha/exq-ico-1/src/helpers/getterFunctions.js"],"names":["bep20Abi","crowdsaleAbi","getAddress","getAccount","getUserBalance","getWeb3","contracts","getCrowdsaleContract","web3","console","log","crowdsale","eth","Contract","e","getTokenContract","tokenName","token","getAllowance","account","crowdsaleAddress","allowance","methods","call","utils","fromWei","toString","getTokenBalance","balance","balanceOf","getEquivalentToken","tokenToPurchase","contract","toWei","amount","amountNeedsToBePaid","type","checkIfApproved","inputAmount","Number","isUserHaveId","id","usersId","generateRefLink","link","process","env","REACT_APP_URL","getCorrespondingEQX","receivingEQX","getCorrespondingTokens","getCurrId","currId","getCurrPrice","price"],"mappings":"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","sourcesContent":["import bep20Abi from './../Config/abis/bep20Abi.json';\nimport crowdsaleAbi from './../Config/abis/crowdsaleAbi.json'\nimport { getAddress } from './addressHelper';\nimport { getAccount, getUserBalance, getWeb3 } from './currentWalletHelper';\nimport contracts from './../Config/contracts'\n\n\nexport const getCrowdsaleContract = async () => {\n    try {\n        let web3 = await getWeb3();\n        console.log(\"here\", web3);\n        let crowdsale = await new web3.eth.Contract(crowdsaleAbi, await getAddress(contracts.crowdsale));\n        console.log(\"crowdsale\", crowdsale)\n        return crowdsale;\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\n\nexport const getTokenContract = async (tokenName) => {\n    try {\n        let web3 = await getWeb3();\n        let token = await new web3.eth.Contract(bep20Abi, await getAddress(contracts[tokenName]));\n        console.log(\"token\", token)\n        return token;\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\nexport const getAllowance = async (tokenName, account) => {\n    try {\n        let web3 = await getWeb3();\n        let token = await getTokenContract(tokenName);\n        let crowdsaleAddress = await getAddress(contracts.crowdsale)\n        let allowance = await token.methods.allowance(account, crowdsaleAddress).call()\n        console.log(\"allowance\", await web3.utils.fromWei(allowance.toString(), \"ether\"));\n        return await web3.utils.fromWei(allowance.toString(), \"ether\")\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\n\nexport const getTokenBalance = async (tokenName, account) => {\n    try {\n\n        let web3 = await getWeb3();\n        let token = await getTokenContract(tokenName);\n        let balance\n        if (tokenName == \"bnb\") {\n            balance = await getUserBalance();\n        }\n        else\n            balance = await token.methods.balanceOf(account).call()\n        console.log(\"balance\", await web3.utils.fromWei(balance.toString(), \"ether\"));\n        return await web3.utils.fromWei(balance.toString(), \"ether\")\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\n\nexport const getEquivalentToken = async (tokenToPurchase, tokenName) => {\n    try {\n        let web3 = await getWeb3();\n        let contract = await getCrowdsaleContract()\n        tokenToPurchase = await web3.utils.toWei(tokenToPurchase.toString())\n        console.log(\"token to purchase\", tokenToPurchase)\n        let amount = await contract.methods.amountNeedsToBePaid(tokenToPurchase, contracts[tokenName].type).call();\n        console.log(\"amount1\", amount.toString())\n        console.log(\"amount\", await web3.utils.fromWei(amount, \"ether\"));\n        return (await web3.utils.fromWei(amount, \"ether\")).toString();\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\n\nexport const checkIfApproved = async (inputAmount, tokenName, account) => {\n    try {\n        let allowance = await getAllowance(tokenName, account);\n        console.log(\"allowances\", inputAmount, allowance)\n        if (Number(allowance) < Number(inputAmount)) {\n            console.log(\"false\")\n            return false;\n        }\n\n        else {\n            console.log(\"true\")\n            return true;\n        }\n    }\n    catch (e) {\n        console.log(e)\n    }\n\n}\n\nexport const isUserHaveId = async (account) => {\n    try {\n        let web3 = await getWeb3();\n        let contract = await getCrowdsaleContract()\n        let id = await contract.methods.usersId(account).call();\n        // console.log(\"id-------->\", id)\n        return id.toString();\n    }\n    catch (e) {\n        console.log(e)\n    }\n}\n\nexport const generateRefLink = async (account) => {\n    let link;\n    let id = await isUserHaveId(account);\n    if (Number(id) < 10000) {\n        return \"\"\n    }\n    link = process.env.REACT_APP_URL + \"?id=\" + id;\n    return link\n    // console.log(\"ref-link\", link,process.env.REACT_APP_URL)\n}\n\nexport const getCorrespondingEQX = async(amount,tokenName)=>{\n    try {\n        let web3 = await getWeb3();\n        let contract = await getCrowdsaleContract()\n        amount = await web3.utils.toWei(amount.toString())\n        \n        let receivingEQX = await contract.methods.getCorrespondingTokens(amount,contracts[tokenName].type).call();\n        console.log(\"receivingEQX-------->\", receivingEQX)\n        return (await web3.utils.fromWei(receivingEQX, \"ether\")).toString();\n    \n    }\n    catch (e) {\n        console.log(e)\n    }\n}\n\nexport const getCurrId = async () => {\n    try {\n        let web3 = await getWeb3();\n        let contract = await getCrowdsaleContract()\n        let id = await contract.methods.currId().call();\n        console.log(\"currid-------->\", id)\n        return id.toString();\n    }\n    catch (e) {\n        console.log(e)\n    }\n}\n\nexport const getCurrPrice = async () => {\n    let contract = await getCrowdsaleContract()\n    let price = await contract.methods.price().call();\n    console.log(\"price-------->\", price / 1e8)\n    return (price / 1e8).toString();\n}\n\n"]},"metadata":{},"sourceType":"module"}