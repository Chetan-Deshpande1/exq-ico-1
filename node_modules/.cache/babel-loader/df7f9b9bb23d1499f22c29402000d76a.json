{"ast":null,"code":"var _jsxFileName = \"/home/neha/exq-ico-1/src/components/header/Accountmodal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Web3 from \"web3\";\nimport { connect } from \"react-redux\";\nimport { accountUpdate } from \"./../../redux/actions\";\nimport { Button } from \"reactstrap\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport GeneralModal from \"./wrongNetworkModal\";\nimport \"../header.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n  web3.eth.extend({\n    methods: [{\n      name: \"chainId\",\n      call: \"eth_chainId\",\n      outputFormatter: web3.utils.hexToNumber\n    }]\n  });\n  return web3;\n}\n\nconst AccountModal = props => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [wrongNetwork, setWrongNetwork] = useState(false);\n  const [onBtnClass, setOnBtnClass] = useState(\"inline-block chain font-11 shadow-md\");\n  const [offBtnClass, setOffBtnClass] = useState(\"inline-block chain-disabled font-11\");\n  let web3Modal = null;\n  let web3 = null;\n  let provider = null; // to initilize the web3Modal\n\n  const init = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId: \"c3f6ce1953e4470191a8d12b8ba92672\",\n          rpcUrl: process.env.REACT_APP_RPC_URL\n        }\n      }\n    };\n    web3Modal = new Web3Modal({\n      network: process.env.REACT_APP_NETWORK,\n      cacheProvider: false,\n      providerOptions: providerOptions\n    });\n    provider = await detectEthereumProvider();\n  };\n\n  init();\n  useEffect(() => {\n    async function update() {\n      if (window.sessionStorage.getItem(\"selected_account\") != null) {\n        setCurrentAccount(window.sessionStorage.getItem(\"selected_account\"));\n\n        if (provider) {\n          web3 = await initWeb3(provider);\n          props.dispatch(accountUpdate({\n            account: window.sessionStorage.getItem(\"selected_account\")\n          }));\n        }\n      }\n    }\n\n    update();\n  }, [window.sessionStorage.getItem(\"selected_Account\"), web3, provider]); // action on connect wallet button\n\n  const onConnect = async () => {\n    //Detect Provider\n    try {\n      provider = await web3Modal.connect();\n\n      if (provider.open) {\n        await provider.open();\n        web3 = await initWeb3(provider);\n        web3.eth.getAccounts(console.log);\n      }\n\n      window.sessionStorage.setItem(\"Provider\", provider);\n\n      if (!provider) {\n        console.log(\"no provider found\");\n      } else {\n        web3 = new Web3(provider);\n        await ConnectWallet();\n      }\n\n      const chainId = await web3.eth.net.getId();\n\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n        setWrongNetwork(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // connect wallet\n\n\n  const ConnectWallet = async () => {\n    if (\"caches\" in window) {\n      caches.keys().then(names => {\n        // Delete all the cache files\n        names.forEach(name => {\n          caches.delete(name);\n        });\n      });\n    }\n\n    try {\n      const chainId = await web3.eth.net.getId();\n\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n        console.log(\"Wrong network\");\n        setWrongNetwork(true);\n        props.dispatch(accountUpdate({\n          account: null\n        }));\n      } else {\n        // Get list of accounts of the connected wallet\n        setWrongNetwork(false);\n        const accounts = await web3.eth.getAccounts(); // MetaMask does not give you all accounts, only the selected account\n\n        window.sessionStorage.setItem(\"selected_account\", accounts[0]);\n        const chainId = await web3.eth.net.getId();\n        props.dispatch(accountUpdate({\n          account: accounts[0]\n        }));\n        setCurrentAccount(accounts[0]);\n        console.log(\"connected Account\", accounts[0]);\n      }\n    } catch (error) {\n      if (error.message) {\n        console.log(\"error\", error.message);\n      }\n    }\n  }; //  disconnect wallet\n\n\n  const onDisconnect = useCallback(async () => {\n    if (!web3) {\n      window.sessionStorage.removeItem(\"selected_account\");\n    }\n\n    if (web3) {\n      const chainId = await web3.eth.net.getId();\n      props.dispatch(accountUpdate({\n        account: null\n      }));\n    }\n\n    window.sessionStorage.removeItem(\"selected_account\");\n    window.sessionStorage.removeItem(\"Provider\");\n    await setCurrentAccount(null);\n    if (web3Modal) await web3Modal.clearCachedProvider();\n    web3Modal = null;\n\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\n      await web3.currentProvider.disconnect();\n    }\n\n    if (\"caches\" in window) {\n      caches.keys().then(names => {\n        // Delete all the cache files\n        names.forEach(name => {\n          caches.delete(name);\n        });\n      });\n      if (!wrongNetwork) window.location.reload(true);\n    }\n  }, [currentAccount]);\n  useEffect(() => {\n    console.log(\"provider\", provider);\n\n    if (provider) {\n      provider.on(\"chainChanged\", async _chainId => {\n        const chainId = parseInt(_chainId, 16);\n\n        if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n          if (currentAccount) console.log(\"Wrong Network first\");\n          setWrongNetwork(true);\n          props.dispatch(accountUpdate({\n            account: null\n          }));\n          onDisconnect();\n        } else {\n          setWrongNetwork(false);\n          props.dispatch(accountUpdate({\n            account: currentAccount\n          }));\n        }\n      });\n    }\n  }, [onDisconnect]); // function to detect account change\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"accountsChanged\", async function (accounts) {\n        const id = await provider.request({\n          method: \"eth_chainId\"\n        });\n        const chainId = parseInt(id, 16);\n        console.log(\"Account changed\", accounts[0]);\n\n        if (chainId.toString() == process.env.REACT_APP_CHAIN_ID && currentAccount) {\n          setCurrentAccount(accounts[0]);\n          console.log(\"Account changed\", accounts[0]);\n          window.sessionStorage.removeItem(\"selected_account\");\n          window.sessionStorage.setItem(\"selected_account\", accounts[0]);\n          props.dispatch(accountUpdate({\n            account: accounts[0]\n          }));\n        } else if (chainId.toString() != process.env.REACT_APP_CHAIN_ID) {\n          console.log(\"Wrong Network\");\n          setWrongNetwork(true);\n          props.dispatch(accountUpdate({\n            account: null\n          }));\n          window.sessionStorage.removeItem(\"selected_account\");\n          setCurrentAccount(null);\n          await onDisconnect();\n        }\n      });\n    }\n  }, [currentAccount]); // function to detect network change\n\n  useEffect(() => {\n    async function updateAccount() {\n      if (provider) {\n        window.sessionStorage.setItem(\"selected_account\", currentAccount);\n        props.dispatch(accountUpdate({\n          account: currentAccount\n        }));\n      }\n    }\n\n    if (currentAccount) {\n      updateAccount();\n    }\n  }, [currentAccount]);\n  const [offChk, setOffChk] = useState(true);\n  const [onChk, setOnChk] = useState(false);\n\n  async function offChain() {\n    setOffBtnClass(\"inline-block chain-disabled font-11\");\n    setOnBtnClass(\"inline-block chain font-11 shadow-md\");\n    if (currentAccount) await onDisconnect();\n    setOffChk(false);\n    setOnChk(true);\n  }\n\n  async function onChain() {\n    if (!currentAccount) await onConnect();\n    setOnBtnClass(\"inline-block chain-disabled font-11\");\n    setOffBtnClass(\"inline-block chain font-11 shadow-md\");\n    setOffChk(true);\n    setOnChk(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [window.sessionStorage.getItem(\"selected_account\") ? window.sessionStorage.getItem(\"selected_account\").slice(0, 5) + \"...\" + window.sessionStorage.getItem(\"selected_account\").slice(37, 42) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: onBtnClass,\n      onClick: () => offChain(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"hidden\",\n        checked: offChk\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"font-11\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-extrabold\",\n          children: \"OFF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), \"-WALLET\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: offBtnClass,\n      onClick: () => onChain(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"hidden\",\n        checked: onChk\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"font-11\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-extrabold\",\n          children: \"ON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), \"-WALLET\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AccountModal, \"3/JgUDdy7FNMlL5EKvGvS7IiyJQ=\");\n\n_c = AccountModal;\n\nconst mapStateToProps = state => {\n  return {\n    account: state.account\n  };\n};\n\nexport default connect(mapStateToProps)(AccountModal);\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountModal\");","map":{"version":3,"sources":["/home/neha/exq-ico-1/src/components/header/Accountmodal.js"],"names":["React","useState","useEffect","useCallback","Web3","connect","accountUpdate","Button","Web3Modal","WalletConnectProvider","detectEthereumProvider","GeneralModal","initWeb3","provider","web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","AccountModal","props","currentAccount","setCurrentAccount","wrongNetwork","setWrongNetwork","onBtnClass","setOnBtnClass","offBtnClass","setOffBtnClass","web3Modal","init","providerOptions","walletconnect","package","options","infuraId","rpcUrl","process","env","REACT_APP_RPC_URL","network","REACT_APP_NETWORK","cacheProvider","update","window","sessionStorage","getItem","dispatch","account","onConnect","open","getAccounts","console","log","setItem","ConnectWallet","chainId","net","getId","toString","REACT_APP_CHAIN_ID","error","caches","keys","then","names","forEach","delete","accounts","message","onDisconnect","removeItem","clearCachedProvider","currentProvider","close","disconnect","location","reload","on","_chainId","parseInt","id","request","method","updateAccount","offChk","setOffChk","onChk","setOnChk","offChain","onChain","slice","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Web3 from \"web3\";\nimport { connect } from \"react-redux\";\nimport { accountUpdate } from \"./../../redux/actions\";\nimport { Button } from \"reactstrap\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport GeneralModal from \"./wrongNetworkModal\";\nimport \"../header.css\";\n\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber,\n      },\n    ],\n  });\n\n  return web3;\n}\n\nconst AccountModal = (props) => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [wrongNetwork, setWrongNetwork] = useState(false);\n  const [onBtnClass, setOnBtnClass] = useState(\n    \"inline-block chain font-11 shadow-md\"\n  );\n  const [offBtnClass, setOffBtnClass] = useState(\n    \"inline-block chain-disabled font-11\"\n  );\n  let web3Modal = null;\n  let web3 = null;\n  let provider = null;\n\n  // to initilize the web3Modal\n\n  const init = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId: \"c3f6ce1953e4470191a8d12b8ba92672\",\n          rpcUrl: process.env.REACT_APP_RPC_URL,\n        },\n      },\n    };\n\n    web3Modal = new Web3Modal({\n      network: process.env.REACT_APP_NETWORK,\n      cacheProvider: false,\n      providerOptions: providerOptions,\n    });\n    provider = await detectEthereumProvider();\n  };\n\n  init();\n\n  useEffect(() => {\n    async function update() {\n      if (window.sessionStorage.getItem(\"selected_account\") != null) {\n        setCurrentAccount(window.sessionStorage.getItem(\"selected_account\"));\n        if (provider) {\n          web3 = await initWeb3(provider);\n          props.dispatch(\n            accountUpdate({\n              account: window.sessionStorage.getItem(\"selected_account\"),\n            })\n          );\n        }\n      }\n    }\n\n    update();\n  }, [window.sessionStorage.getItem(\"selected_Account\"), web3, provider]);\n  // action on connect wallet button\n\n  const onConnect = async () => {\n    //Detect Provider\n    try {\n      provider = await web3Modal.connect();\n      if (provider.open) {\n        await provider.open();\n        web3 = await initWeb3(provider);\n        web3.eth.getAccounts(console.log);\n      }\n      window.sessionStorage.setItem(\"Provider\", provider);\n      if (!provider) {\n        console.log(\"no provider found\");\n      } else {\n        web3 = new Web3(provider);\n        await ConnectWallet();\n      }\n      const chainId = await web3.eth.net.getId();\n\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n        setWrongNetwork(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // connect wallet\n\n  const ConnectWallet = async () => {\n    if (\"caches\" in window) {\n      caches.keys().then((names) => {\n        // Delete all the cache files\n        names.forEach((name) => {\n          caches.delete(name);\n        });\n      });\n    }\n    try {\n      const chainId = await web3.eth.net.getId();\n\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n        console.log(\"Wrong network\");\n        setWrongNetwork(true);\n        props.dispatch(\n          accountUpdate({\n            account: null,\n          })\n        );\n      } else {\n        // Get list of accounts of the connected wallet\n        setWrongNetwork(false);\n        const accounts = await web3.eth.getAccounts();\n\n        // MetaMask does not give you all accounts, only the selected account\n        window.sessionStorage.setItem(\"selected_account\", accounts[0]);\n        const chainId = await web3.eth.net.getId();\n        props.dispatch(\n          accountUpdate({\n            account: accounts[0],\n          })\n        );\n        setCurrentAccount(accounts[0]);\n        console.log(\"connected Account\", accounts[0]);\n      }\n    } catch (error) {\n      if (error.message) {\n        console.log(\"error\", error.message);\n      }\n    }\n  };\n\n  //  disconnect wallet\n\n  const onDisconnect = useCallback(async () => {\n    if (!web3) {\n      window.sessionStorage.removeItem(\"selected_account\");\n    }\n    if (web3) {\n      const chainId = await web3.eth.net.getId();\n      props.dispatch(\n        accountUpdate({\n          account: null,\n        })\n      );\n    }\n    window.sessionStorage.removeItem(\"selected_account\");\n    window.sessionStorage.removeItem(\"Provider\");\n    await setCurrentAccount(null);\n    if (web3Modal) await web3Modal.clearCachedProvider();\n    web3Modal = null;\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\n      await web3.currentProvider.disconnect();\n    }\n    if (\"caches\" in window) {\n      caches.keys().then((names) => {\n        // Delete all the cache files\n        names.forEach((name) => {\n          caches.delete(name);\n        });\n      });\n      if (!wrongNetwork) window.location.reload(true);\n    }\n  }, [currentAccount]);\n\n  useEffect(() => {\n    console.log(\"provider\", provider);\n    if (provider) {\n      provider.on(\"chainChanged\", async (_chainId) => {\n        const chainId = parseInt(_chainId, 16);\n\n        if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n          if (currentAccount) console.log(\"Wrong Network first\");\n          setWrongNetwork(true);\n          props.dispatch(\n            accountUpdate({\n              account: null,\n            })\n          );\n          onDisconnect();\n        } else {\n          setWrongNetwork(false);\n          props.dispatch(\n            accountUpdate({\n              account: currentAccount,\n            })\n          );\n        }\n      });\n    }\n  }, [onDisconnect]);\n\n  // function to detect account change\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"accountsChanged\", async function (accounts) {\n        const id = await provider.request({ method: \"eth_chainId\" });\n        const chainId = parseInt(id, 16);\n        console.log(\"Account changed\", accounts[0]);\n        if (\n          chainId.toString() == process.env.REACT_APP_CHAIN_ID &&\n          currentAccount\n        ) {\n          setCurrentAccount(accounts[0]);\n          console.log(\"Account changed\", accounts[0]);\n          window.sessionStorage.removeItem(\"selected_account\");\n          window.sessionStorage.setItem(\"selected_account\", accounts[0]);\n          props.dispatch(\n            accountUpdate({\n              account: accounts[0],\n            })\n          );\n        } else if (chainId.toString() != process.env.REACT_APP_CHAIN_ID) {\n          console.log(\"Wrong Network\");\n          setWrongNetwork(true);\n          props.dispatch(\n            accountUpdate({\n              account: null,\n            })\n          );\n          window.sessionStorage.removeItem(\"selected_account\");\n          setCurrentAccount(null);\n          await onDisconnect();\n        }\n      });\n    }\n  }, [currentAccount]);\n\n  // function to detect network change\n\n  useEffect(() => {\n    async function updateAccount() {\n      if (provider) {\n        window.sessionStorage.setItem(\"selected_account\", currentAccount);\n\n        props.dispatch(\n          accountUpdate({\n            account: currentAccount,\n          })\n        );\n      }\n    }\n    if (currentAccount) {\n      updateAccount();\n    }\n  }, [currentAccount]);\n  const [offChk, setOffChk] = useState(true);\n  const [onChk, setOnChk] = useState(false);\n\n  async function offChain() {\n    setOffBtnClass(\"inline-block chain-disabled font-11\");\n    setOnBtnClass(\"inline-block chain font-11 shadow-md\");\n    if (currentAccount)\n      await onDisconnect()\n    setOffChk(false);\n    setOnChk(true);\n  }\n\n  async function onChain() {\n    if (!currentAccount)\n      await onConnect()\n    setOnBtnClass(\"inline-block chain-disabled font-11\");\n    setOffBtnClass(\"inline-block chain font-11 shadow-md\");\n    setOffChk(true);\n    setOnChk(false);\n  }\n  return (\n    <>\n\n      {window.sessionStorage.getItem(\"selected_account\")\n        ? window.sessionStorage.getItem(\"selected_account\").slice(0, 5) +\n        \"...\" +\n        window.sessionStorage.getItem(\"selected_account\").slice(37, 42)\n        : \"\"\n      }\n\n\n\n      <div className={onBtnClass} onClick={() => offChain()}>\n        <input\n          type=\"checkbox\"\n          className=\"hidden\"\n          checked={offChk}\n        />\n        <label className=\"font-11\">\n          <span className=\"font-extrabold\">OFF</span>-WALLET\n        </label>\n      </div>\n      <div className={offBtnClass} onClick={() => onChain()}>\n        <input type=\"checkbox\" className=\"hidden\" checked={onChk} />\n        <label className=\"font-11\">\n          <span className=\"font-extrabold\">ON</span>-WALLET\n        </label>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    account: state.account,\n  };\n};\n\nexport default connect(mapStateToProps)(AccountModal);\n"]},"metadata":{},"sourceType":"module"}