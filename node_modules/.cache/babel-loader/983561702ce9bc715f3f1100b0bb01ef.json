{"ast":null,"code":"import { getWeb3 } from \"./currentWalletHelper\";\nimport { getAddress } from \"./addressHelper\";\nimport contracts from \"../Config/contracts\";\nimport { getCrowdsaleContract, getEquivalentToken, getTokenContract } from './getterFunctions';\nimport BigNumber from 'bignumber.js';\nexport const buyToken = async (tokenAmount, referrer, tokenName, account) => {\n  let web3 = await getWeb3();\n  let contract = await getCrowdsaleContract();\n  let value = 0; // console.log(\"token type is --------->\", contracts[tokenName].type);\n  // big Number\n\n  if (contracts[tokenName].type == 2) {\n    value = await getEquivalentToken(tokenAmount, tokenName);\n  }\n\n  value = new BigNumber(value).multipliedBy(new BigNumber(10).exponentiatedBy(new BigNumber(18)));\n  console.log(\"value--------->\", referrer, tokenAmount, contracts[tokenName].type);\n  tokenAmount = await web3.utils.toWei(tokenAmount.toString());\n  let res = await contract.methods.buyTokens(referrer, tokenAmount, contracts[tokenName].type).send({\n    from: account,\n    value: value\n  });\n  console.log(\"token buy--------->\", res);\n  return res;\n};\nexport const approveTokens = async (tokenName, account) => {\n  let token = await getTokenContract(tokenName);\n  let crowdsaleAddress = await getAddress(contracts.crowdsale);\n  let tokenAmount = \"10000000000000000000000000000000000000000\";\n  let res = await token.methods.approve(crowdsaleAddress, tokenAmount).send({\n    from: account\n  });\n  return res;\n};","map":{"version":3,"sources":["/home/neha/exq-ico-1/src/helpers/setterFunctions.js"],"names":["getWeb3","getAddress","contracts","getCrowdsaleContract","getEquivalentToken","getTokenContract","BigNumber","buyToken","tokenAmount","referrer","tokenName","account","web3","contract","value","type","multipliedBy","exponentiatedBy","console","log","utils","toWei","toString","res","methods","buyTokens","send","from","approveTokens","token","crowdsaleAddress","crowdsale","approve"],"mappings":"AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,EAAmDC,gBAAnD,QAA2E,mBAA3E;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAG,OAAOC,WAAP,EAAoBC,QAApB,EAA8BC,SAA9B,EAAyCC,OAAzC,KAAqD;AACzE,MAAIC,IAAI,GAAG,MAAMZ,OAAO,EAAxB;AACA,MAAIa,QAAQ,GAAG,MAAMV,oBAAoB,EAAzC;AACA,MAAIW,KAAK,GAAG,CAAZ,CAHyE,CAIzE;AAEA;;AACA,MAAIZ,SAAS,CAACQ,SAAD,CAAT,CAAqBK,IAArB,IAA6B,CAAjC,EAAoC;AAChCD,IAAAA,KAAK,GAAG,MAAMV,kBAAkB,CAACI,WAAD,EAAcE,SAAd,CAAhC;AACH;;AACDI,EAAAA,KAAK,GAAG,IAAIR,SAAJ,CAAcQ,KAAd,EAAqBE,YAArB,CAAkC,IAAIV,SAAJ,CAAc,EAAd,EAAkBW,eAAlB,CAAkC,IAAIX,SAAJ,CAAc,EAAd,CAAlC,CAAlC,CAAR;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BV,QAA/B,EAAyCD,WAAzC,EAAsDN,SAAS,CAACQ,SAAD,CAAT,CAAqBK,IAA3E;AACAP,EAAAA,WAAW,GAAG,MAAMI,IAAI,CAACQ,KAAL,CAAWC,KAAX,CAAiBb,WAAW,CAACc,QAAZ,EAAjB,CAApB;AACA,MAAIC,GAAG,GAAG,MAAMV,QAAQ,CAACW,OAAT,CAAiBC,SAAjB,CAA2BhB,QAA3B,EAAqCD,WAArC,EAAkDN,SAAS,CAACQ,SAAD,CAAT,CAAqBK,IAAvE,EAA6EW,IAA7E,CAAkF;AAAEC,IAAAA,IAAI,EAAEhB,OAAR;AAAiBG,IAAAA,KAAK,EAAEA;AAAxB,GAAlF,CAAhB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,GAAnC;AACA,SAAOA,GAAP;AACH,CAhBM;AAkBP,OAAO,MAAMK,aAAa,GAAG,OAAOlB,SAAP,EAAkBC,OAAlB,KAA8B;AACvD,MAAIkB,KAAK,GAAG,MAAMxB,gBAAgB,CAACK,SAAD,CAAlC;AACA,MAAIoB,gBAAgB,GAAG,MAAM7B,UAAU,CAACC,SAAS,CAAC6B,SAAX,CAAvC;AACA,MAAIvB,WAAW,GAAG,2CAAlB;AACA,MAAIe,GAAG,GAAG,MAAMM,KAAK,CAACL,OAAN,CAAcQ,OAAd,CAAsBF,gBAAtB,EAAwCtB,WAAxC,EAAqDkB,IAArD,CAA0D;AAAEC,IAAAA,IAAI,EAAEhB;AAAR,GAA1D,CAAhB;AACA,SAAOY,GAAP;AACH,CANM","sourcesContent":["import { getWeb3 } from \"./currentWalletHelper\"\nimport { getAddress } from \"./addressHelper\";\nimport contracts from \"../Config/contracts\";\nimport { getCrowdsaleContract, getEquivalentToken, getTokenContract } from './getterFunctions'\nimport BigNumber from 'bignumber.js';\n\nexport const buyToken = async (tokenAmount, referrer, tokenName, account) => {\n    let web3 = await getWeb3()\n    let contract = await getCrowdsaleContract();\n    let value = 0;\n    // console.log(\"token type is --------->\", contracts[tokenName].type);\n\n    // big Number\n    if (contracts[tokenName].type == 2) {\n        value = await getEquivalentToken(tokenAmount, tokenName);\n    }\n    value = new BigNumber(value).multipliedBy(new BigNumber(10).exponentiatedBy(new BigNumber(18)));\n    console.log(\"value--------->\", referrer, tokenAmount, contracts[tokenName].type)\n    tokenAmount = await web3.utils.toWei(tokenAmount.toString())\n    let res = await contract.methods.buyTokens(referrer, tokenAmount, contracts[tokenName].type).send({ from: account, value: value })\n    console.log(\"token buy--------->\", res)\n    return res;\n}\n\nexport const approveTokens = async (tokenName, account) => {\n    let token = await getTokenContract(tokenName);\n    let crowdsaleAddress = await getAddress(contracts.crowdsale);\n    let tokenAmount = \"10000000000000000000000000000000000000000\";\n    let res = await token.methods.approve(crowdsaleAddress, tokenAmount).send({ from: account })\n    return res;\n}\n\n"]},"metadata":{},"sourceType":"module"}